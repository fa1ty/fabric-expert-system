import streamlit as st
import pandas as pd

@st.cache_data
def load_data(path):
    df = pd.read_excel(path)
    df["–ú–∏–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"] = pd.to_numeric(df["–ú–∏–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"], errors="coerce")
    df["–ú–∞–∫—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"] = pd.to_numeric(df["–ú–∞–∫—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"], errors="coerce")
    df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä"] = pd.to_numeric(df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä"], errors="coerce")
    df["–¶–µ–Ω–∞ –∑–∞ –∫–≥"] = pd.to_numeric(df["–¶–µ–Ω–∞ –∑–∞ –∫–≥"], errors="coerce")
    df["–ì–æ—Ä–æ–¥"] = df["–ì–æ—Ä–æ–¥"].astype(str).str.strip().str.lower()
    df["–°–æ—Å—Ç–∞–≤"] = df["–°–æ—Å—Ç–∞–≤"].astype(str).str.strip().str.lower()
    df["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏"].astype(str).str.strip().str.lower()
    df["–¶–≤–µ—Ç–∞"] = df["–¶–≤–µ—Ç"].astype(str).str.replace('\n', ' ').str.lower().str.split(",")
    return df

df = load_data("reliase.xlsx")
—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Ç–∫–∞–Ω–∏ = sorted(df["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏"].dropna().unique())
—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Å–æ—Å—Ç–∞–≤—ã = sorted(df["–°–æ—Å—Ç–∞–≤"].dropna().unique())
—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Ü–≤–µ—Ç–∞ = sorted(set(c.strip() for sublist in df["–¶–≤–µ—Ç–∞"] for c in sublist if isinstance(sublist, list)))
usd_rate = 93.0

st.title("–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ç–∫–∞–Ω–µ–π")

st.sidebar.header("1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏ –∏–ª–∏ –°–æ—Å—Ç–∞–≤")
use_filter_fabric = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∫–∞–Ω–∏/—Å–æ—Å—Ç–∞–≤—É", value=True)
filter_mode = st.sidebar.radio("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ:", ["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏", "–°–æ—Å—Ç–∞–≤"])
–ø–æ—Ö–æ–∂–∏–µ_—Ç–∫–∞–Ω–∏ = df.copy()
if use_filter_fabric:
    if filter_mode == "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏":
        selected_name = st.sidebar.selectbox("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏:", —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Ç–∫–∞–Ω–∏)
        selected_sostav = df[df["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏"] == selected_name]["–°–æ—Å—Ç–∞–≤"].unique()
        –ø–æ—Ö–æ–∂–∏–µ_—Ç–∫–∞–Ω–∏ = df[df["–°–æ—Å—Ç–∞–≤"].isin(selected_sostav)]
    else:
        selected_sostav = st.sidebar.selectbox("–°–æ—Å—Ç–∞–≤:", —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Å–æ—Å—Ç–∞–≤—ã)
        –ø–æ—Ö–æ–∂–∏–µ_—Ç–∫–∞–Ω–∏ = df[df["–°–æ—Å—Ç–∞–≤"] == selected_sostav]

st.sidebar.header("2. –ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
use_filter_density = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏", value=True)
min_density, max_density = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–≥/–º¬≤):", 0, 1000, (200, 400))

st.sidebar.header("3. –¶–µ–Ω–∞")
use_filter_price = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ", value=True)
purchase_type = st.sidebar.radio("–¢–∏–ø –∑–∞–∫—É–ø–∫–∏:", ["–†–æ–∑–Ω–∏—á–Ω–∞—è", "–û–ø—Ç–æ–≤–∞—è"])
currency = st.sidebar.radio("–í–∞–ª—é—Ç–∞:", ["RUB", "USD"])
price_col = "–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä" if purchase_type == "–†–æ–∑–Ω–∏—á–Ω–∞—è" else st.sidebar.radio("–ï–¥–∏–Ω–∏—Ü–∞:", ["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä", "–¶–µ–Ω–∞ –∑–∞ –∫–≥"])
min_price = st.sidebar.number_input("–ú–∏–Ω. —Ü–µ–Ω–∞", value=0.0)
max_price = st.sidebar.number_input("–ú–∞–∫—Å. —Ü–µ–Ω–∞", value=2000.0)

st.sidebar.header("4. –°—Ä–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
use_filter_delivery = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏", value=True)
delivery_times = {
    "–î–æ 5 –¥–Ω–µ–π": ["–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥"],
    "–î–æ 10 –¥–Ω–µ–π": ["–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "–º–æ—Å–∫–≤–∞"],
    "–ë–æ–ª–µ–µ 15 –¥–Ω–µ–π": ["–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "–º–æ—Å–∫–≤–∞", "–∫–∞–∑–∞–Ω—å"]
}
selected_delivery = st.sidebar.selectbox("–°—Ä–æ—á–Ω–æ—Å—Ç—å:", list(delivery_times.keys()))
allowed_cities = delivery_times[selected_delivery]

st.sidebar.header("5. –¶–≤–µ—Ç")
use_filter_color = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ü–≤–µ—Ç—É", value=True)
selected_colors = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–∞:", —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ_—Ü–≤–µ—Ç–∞)

filtered_df = df.copy()
if use_filter_fabric:
    filtered_df = filtered_df[filtered_df.index.isin(–ø–æ—Ö–æ–∂–∏–µ_—Ç–∫–∞–Ω–∏.index)]
if use_filter_density:
    filtered_df = filtered_df[
        (filtered_df["–ú–∞–∫—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"] >= min_density) &
        (filtered_df["–ú–∏–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"] <= max_density)
    ]
if use_filter_price:
    prices = filtered_df[price_col] * (usd_rate if currency == "USD" else 1)
    filtered_df = filtered_df[(prices >= min_price) & (prices <= max_price)]

# –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –≤ —Ä—É–±–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
if currency == "USD":
    filtered_df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä (–≤ —Ä—É–±)"] = filtered_df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä"] * usd_rate
    filtered_df["–¶–µ–Ω–∞ –∑–∞ –∫–≥ (–≤ —Ä—É–±)"] = filtered_df["–¶–µ–Ω–∞ –∑–∞ –∫–≥"] * usd_rate
else:
    filtered_df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä (–≤ —Ä—É–±)"] = filtered_df["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä"]
    filtered_df["–¶–µ–Ω–∞ –∑–∞ –∫–≥ (–≤ —Ä—É–±)"] = filtered_df["–¶–µ–Ω–∞ –∑–∞ –∫–≥"]

if use_filter_delivery:
    filtered_df = filtered_df[filtered_df["–ì–æ—Ä–æ–¥"].isin(allowed_cities)]
if use_filter_color and selected_colors:
    filtered_df = filtered_df[filtered_df["–¶–≤–µ—Ç–∞"].apply(lambda clrs: any(c.strip() in clrs for c in selected_colors))]

st.sidebar.header("6. AHP - –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏–µ—Ä–∞—Ä—Ö–∏–π")
use_ahp = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å AHP", value=True)

if use_ahp and not filtered_df.empty:
    weights = {
        "–¢–∫–∞–Ω—å/–°–æ—Å—Ç–∞–≤": st.sidebar.slider("–í–µ—Å: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏ / –°–æ—Å—Ç–∞–≤", 0.0, 1.0, 0.2),
        "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å": st.sidebar.slider("–í–µ—Å: –ü–ª–æ—Ç–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.25),
        "–¶–µ–Ω–∞": st.sidebar.slider("–í–µ—Å: –¶–µ–Ω–∞", 0.0, 1.0, 0.25),
        "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏": st.sidebar.slider("–í–µ—Å: –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏", 0.0, 1.0, 0.15),
        "–¶–≤–µ—Ç": st.sidebar.slider("–í–µ—Å: –¶–≤–µ—Ç", 0.0, 1.0, 0.15)
    }
    total = sum(weights.values())
    weights = {k: v / total for k, v in weights.items()}
    def norm_score(val, best, tol): return max(0, 1 - abs(val - best) / tol) if pd.notna(val) else 1
    target_density = (min_density + max_density) / 2
    filtered_df["–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"] = (
        filtered_df["–ú–∏–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"] + filtered_df["–ú–∞–∫—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"]) / 2
    filtered_df["–û—Ü–µ–Ω–∫–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"] = filtered_df["–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"].apply(lambda x: norm_score(x, target_density, 50))
    if use_filter_price:
        price_val = filtered_df[price_col] * (usd_rate if currency == "USD" else 1)
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Ü–µ–Ω—ã"] = price_val.apply(lambda x: norm_score(x, price_val.min(), 300))
    else:
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Ü–µ–Ω—ã"] = 1
    filtered_df["–û—Ü–µ–Ω–∫–∞_—Ç–∫–∞–Ω–∏"] = 1
    filtered_df["–û—Ü–µ–Ω–∫–∞_—Å—Ä–æ–∫–∞"] = 1
    filtered_df["–û—Ü–µ–Ω–∫–∞_—Ü–≤–µ—Ç–∞"] = 1 if not use_filter_color else filtered_df["–¶–≤–µ—Ç–∞"].apply(
        lambda clrs: 1 if any(c.strip() in clrs for c in selected_colors) else 0)
    filtered_df["AHP_–æ—Ü–µ–Ω–∫–∞"] = (
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Ç–∫–∞–Ω–∏"] * weights["–¢–∫–∞–Ω—å/–°–æ—Å—Ç–∞–≤"] +
        filtered_df["–û—Ü–µ–Ω–∫–∞_–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"] * weights["–ü–ª–æ—Ç–Ω–æ—Å—Ç—å"] +
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Ü–µ–Ω—ã"] * weights["–¶–µ–Ω–∞"] +
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Å—Ä–æ–∫–∞"] * weights["–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏"] +
        filtered_df["–û—Ü–µ–Ω–∫–∞_—Ü–≤–µ—Ç–∞"] * weights["–¶–≤–µ—Ç"]
    )
    sorted_weights = sorted(weights.items(), key=lambda x: -x[1])
    priority_cols = []
    for key, _ in sorted_weights:
        if key == "–¢–∫–∞–Ω—å/–°–æ—Å—Ç–∞–≤": priority_cols += ["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏", "–°–æ—Å—Ç–∞–≤"]
        elif key == "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å": priority_cols += ["–ú–∏–Ω –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)", "–ú–∞–∫—Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–≥/–º2)"]
        elif key == "–¶–µ–Ω–∞": priority_cols += ["–¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä (–≤ —Ä—É–±)", "–¶–µ–Ω–∞ –∑–∞ –∫–≥ (–≤ —Ä—É–±)"]
        elif key == "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏": priority_cols.append("–ì–æ—Ä–æ–¥")
        elif key == "–¶–≤–µ—Ç": priority_cols.append("–¶–≤–µ—Ç")
    rest = [c for c in filtered_df.columns if c not in priority_cols and not c.startswith("–û—Ü–µ–Ω–∫–∞")]
    show_cols = priority_cols + ["AHP_–æ—Ü–µ–Ω–∫–∞"] + rest
    show_cols = list(dict.fromkeys(show_cols))  # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ AHP")
    st.write(filtered_df.sort_values("AHP_–æ—Ü–µ–Ω–∫–∞", ascending=False)[show_cols].reset_index(drop=True))
else:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    st.write(filtered_df.reset_index(drop=True))


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
with st.expander("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    st.dataframe(df)
